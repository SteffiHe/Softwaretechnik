/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

// Konfiguration der Verzeichnisse

ext {
    srcDir = 'src'
    buildDir = 'build'
    distDir = 'dist'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	// Setzen der erforderlichen Klassenpfade
	implementation files('lib/nutripaws.jar')
	
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'gradlebuildmanagement.App'
}


// Aufgaben und Ausgaben des Projektes

task initSetup {
    doLast {
        println 'Initialisiere das Projekt...'
        file(buildDir).mkdirs()
        file(distDir).mkdirs()
    }
}

task clean {
    doLast {
        println 'Bereinige das Projekt...'
        delete buildDir
        delete distDir
    }
}

task compile {
    dependsOn initSetup
    sourceDir = file(srcDir)
    destinationDir = file(buildDir)
    classpath = files('lib/nutripaws.jar')
}

task run(type: JavaExec) {
    dependsOn compile
    println 'Führe die Anwendung aus...'
    classpath = files('lib/nutripaws.jar', compile.destinationDir)
    main = 'com.example.MainClass'
}

task createLib {
    dependsOn clean
    doLast {
        println 'Erstelle das Verzeichnis lib...'
        file('lib').mkdirs()
    }
}

task doc {
    dependsOn compile
    doLast {
        println 'Erstelle die Dokumentation...'
    }
}

task test {
    dependsOn compile
    doLast {
        println 'Führe Tests aus...'
    }
}

task get {
    doLast {
        println 'Hole Ressourcen...'
    }
}

task jar(type: Jar) {
    dependsOn compile
    doLast {
        println 'Erstelle JAR-Datei...'
        archiveFileName = 'nutripaws.jar'
        destinationDirectory = file(distDir)
        from compile.destinationDir
    }
}

defaultTasks 'run'
